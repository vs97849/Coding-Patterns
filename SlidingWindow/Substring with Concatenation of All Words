/*
You are given a string s and an array of strings words. All the strings of words are of the same length.

A concatenated string is a string that exactly contains all the strings of any permutation of words concatenated.

For example, if words = ["ab","cd","ef"], then "abcdef", "abefcd", "cdabef", "cdefab", "efabcd", and "efcdab" are all concatenated strings. 
"acdbef" is not a concatenated string because it is not the concatenation of any permutation of words.
Return an array of the starting indices of all the concatenated substrings in s. You can return the answer in any order.

 

Example 1:

Input: s = "barfoothefoobarman", words = ["foo","bar"]

Output: [0,9]

Explanation:

The substring starting at 0 is "barfoo". It is the concatenation of ["bar","foo"] which is a permutation of words.
The substring starting at 9 is "foobar". It is the concatenation of ["foo","bar"] which is a permutation of words.

Example 2:

Input: s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"]

Output: []

Explanation:

There is no concatenated substring.

Example 3:

Input: s = "barfoofoobarthefoobarman", words = ["bar","foo","the"]

Output: [6,9,12]

Explanation:

The substring starting at 6 is "foobarthe". It is the concatenation of ["foo","bar","the"].
The substring starting at 9 is "barthefoo". It is the concatenation of ["bar","the","foo"].
The substring starting at 12 is "thefoobar". It is the concatenation of ["the","foo","bar"].

 

Constraints:

1 <= s.length <= 104
1 <= words.length <= 5000
1 <= words[i].length <= 30
s and words[i] consist of lowercase English letters.

*/


Intuition 1 :
   As we need to collect the start of the concatenated string , made from appending the words of words array given, in any one of the order possible.
   So scan the input big string, check the substring of size equal to each word, whether it belongs to any of the words of word array or not .
   if it belongs to then move ahead and check for other word, else start checking from next of the index ( from which we started earlier )
   As to reduce the complexity of word exisitance check, we can hash the words by it's count in unordered_map. If by doing so , we find all words, then we can add the index, 
   else start checking for next.


    bool checkCombinedSubString( string & s, unordered_map< string, int > wordHash, int i, int wl, int totalWL ) {
        for( ; totalWL > 0 ; i += wl, totalWL -= wl ) {
            string subS = s.substr( i, wl ) ;
            if( wordHash.find( subS ) == wordHash.end() ) return false ;
            if( -- wordHash[ subS ] < 0 ) return false ;
        }
        return true ;
    }
    
    vector< int > findSubstring(string s, vector<string>& words) {
        unordered_map< string, int > wordHash;
        int totalWL = 0;
        for(string & word : words) {
            ++ wordHash [ word ] ;
            totalWL += word.length();
        }
        int i=0, wl = words[0].length();
        vector< int > ans;
        while( i < s.length() - totalWL + 1 ) {
            if( checkCombinedSubString(s, wordHash, i, wl, totalWL) ) {
                ans.push_back( i );
            }
            ++i;
        }
        return ans;
    }
